IMAGE_NAME = "bento/ubuntu-16.04"
IMAGE2_NAME = "gusztavvargadr/windows-10"
N = 1

Vagrant.configure("2") do |config|
    config.ssh.insert_key = false

    config.vm.provider "virtualbox" do |v|
        v.memory = 1024
        v.cpus = 2
    end
      
    config.vm.define "k8s-master", autostart: true do |master|
        master.vm.box = IMAGE_NAME
        master.vm.network "private_network", ip: "192.168.50.10"
        master.vm.hostname = "k8s-master"
        master.vm.provision "ansible" do |ansible|
            ansible.compatibility_mode = "auto"
            ansible.playbook = "kubernetes-setup/master-playbook.yml"
            ansible.extra_vars = {
                node_ip: "192.168.50.10",
            }
        end
    end

    (1..N).each do |i|
        config.vm.define "node-#{i}", autostart: true do|node|
            node.vm.box = IMAGE_NAME
            node.vm.network "private_network", ip: "192.168.50.#{i + 10}"
            node.vm.hostname = "k8s-node-#{i}"
            node.vm.provision "ansible" do |ansible|
                ansible.compatibility_mode = "auto"
                ansible.playbook = "kubernetes-setup/node-playbook.yml"
                ansible.extra_vars = {
                    node_ip: "192.168.50.#{i + 10}",
                }
            end
        end
    
    config.vm.define "win", autostart: false do |win|
    win.vm.box = IMAGE2_NAME
    win.vm.hostname = 'win'

    win.vm.network :private_network, ip: "192.168.50.200"
    win.vm.network :forwarded_port, guest: 3985, host: 10122, id: "rdp"


    win.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--memory", 1024]
      v.customize ["modifyvm", :id, "--name", "win"]
    end
  end

  config.vm.define "artifactory", autostart: true do |web|

        # Resources for this machine
        web.vm.provider "virtualbox" do |vb|
           vb.memory = "2048"
           vb.cpus = "1"
        end

        web.vm.box = "bento/ubuntu-18.04"

        web.vm.hostname = "artifactory"
        web.vm.network "private_network", ip: "192.168.50.201"
        # Define public network. If not present, Vagrant will ask.
        web.vm.network "public_network", bridge: "en0: Wi-Fi (AirPort)"

        web.vm.provision :ansible do |ansible|
            ansible.playbook = "artifactory-install/docker.yml"
            ansible.sudo = true
            ansible.extra_vars = {
                node_ip: "192.168.50.201",
            }
        end

        web.vm.provision :ansible do |ansible|
            ansible.playbook = "artifactory-install/artifactory.yml"
            ansible.sudo = true
            ansible.extra_vars = {
                node_ip: "192.168.50.201",
            }
        end

        # Disable vagrant ssh and log into machine by ssh
        web.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "~/.ssh/authorized_keys"

        # Install Python to be able to provision machine using Ansible
        web.vm.provision "shell", inline: "which python || sudo apt -y install python"

        # Add artifactory address as not using dns
        web.vm.provision "shell", inline: "sudo echo 192.168.50.201 artifactory docker.artifactory docker-remote.artifactory docker-local.artifactory | sudo tee -a /etc/hosts"

        # copy key for artifactory
        config.vm.provision "file", source: "artifactory-install/artifactory/nginx-config/artifactory.key", destination: "~/artifactory.key"

        # copy certs for artifactory
        config.vm.provision "file", source: "artifactory-install/artifactory/nginx-config/artifactory.crt", destination: "~/artifactory.crt"

        # Add artifactory certs for docker
        web.vm.provision "shell", inline: "sudo mv /home/vagrant/artifactory.key /usr/local/share/ca-certificates/artifactory.key"

        # Add artifactory certs for docker
        web.vm.provision "shell", inline: "sudo mv /home/vagrant/artifactory.crt /usr/local/share/ca-certificates/artifactory.crt"

        # Add artifactory certificates
        web.vm.provision "shell", inline: "sudo update-ca-certificates"
       end

        # Provisioning
        #

end
end